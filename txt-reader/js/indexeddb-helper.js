class IndexedDBHelper{constructor(){this.databases=new Map()}async initDB(dbName,version,stores){return new Promise((resolve,reject)=>{console.log('初始化数据库:',dbName,version);const request=indexedDB.open(dbName,version||1);request.onupgradeneeded=(event)=>{console.log('数据库升级 needed');const db=event.target.result;stores.forEach(store=>{if(!db.objectStoreNames.contains(store.name)){console.log('创建对象存储:',store.name);const objectStore=db.createObjectStore(store.name,{keyPath:store.keyPath});if(store.indexes){store.indexes.forEach(index=>{objectStore.createIndex(index.name,index.keyPath,{unique:index.unique})})}}})};request.onsuccess=(event)=>{const db=event.target.result;console.log('数据库初始化成功:',dbName);this.databases.set(dbName,db);resolve(db)};request.onerror=(event)=>{console.error('IndexedDB初始化错误:',event.target.error);reject(new Error('IndexedDB初始化错误: '+event.target.error.message))}})}getDB(dbName){return this.databases.get(dbName)||null}async addData(dbName,storeName,data){const db=this.getDB(dbName);if(!db){throw new Error('数据库未初始化: '+dbName);}return new Promise((resolve,reject)=>{const transaction=db.transaction([storeName],'readwrite');const store=transaction.objectStore(storeName);const request=store.add(data);request.onsuccess=()=>{resolve(request.result)};request.onerror=(event)=>{console.error('添加数据错误:',event.target.error);reject(new Error('添加数据错误: '+event.target.error.message))}})}async getAllData(dbName,storeName){const db=this.getDB(dbName);if(!db){throw new Error('数据库未初始化: '+dbName);}return new Promise((resolve,reject)=>{const transaction=db.transaction([storeName],'readonly');const store=transaction.objectStore(storeName);const request=store.getAll();request.onsuccess=()=>{resolve(request.result)};request.onerror=(event)=>{console.error('获取数据错误:',event.target.error);reject(new Error('获取数据错误: '+event.target.error.message))}})}async getDataByKey(dbName,storeName,key){const db=this.getDB(dbName);if(!db){throw new Error('数据库未初始化: '+dbName);}return new Promise((resolve,reject)=>{const transaction=db.transaction([storeName],'readonly');const store=transaction.objectStore(storeName);const request=store.get(key);request.onsuccess=()=>{resolve(request.result)};request.onerror=(event)=>{console.error('获取数据错误:',event.target.error);reject(new Error('获取数据错误: '+event.target.error.message))}})}async updateData(dbName,storeName,data){const db=this.getDB(dbName);if(!db){throw new Error('数据库未初始化: '+dbName);}console.log('更新数据到存储:',storeName,data);return new Promise((resolve,reject)=>{const transaction=db.transaction([storeName],'readwrite');const store=transaction.objectStore(storeName);const request=store.put(data);request.onsuccess=()=>{console.log('数据更新成功:',storeName);resolve(request.result)};request.onerror=(event)=>{console.error('更新数据错误:',event.target.error);reject(new Error('更新数据错误: '+event.target.error.message))}})}async deleteData(dbName,storeName,key){const db=this.getDB(dbName);if(!db){throw new Error('数据库未初始化: '+dbName);}return new Promise((resolve,reject)=>{const transaction=db.transaction([storeName],'readwrite');const store=transaction.objectStore(storeName);const request=store.delete(key);request.onsuccess=()=>{resolve()};request.onerror=(event)=>{console.error('删除数据错误:',event.target.error);reject(new Error('删除数据错误: '+event.target.error.message))}})}}const indexedDBHelperInstance=new IndexedDBHelper();window.indexedDBHelper={initDB:indexedDBHelperInstance.initDB.bind(indexedDBHelperInstance),addData:indexedDBHelperInstance.addData.bind(indexedDBHelperInstance),getAllData:indexedDBHelperInstance.getAllData.bind(indexedDBHelperInstance),getDataByKey:indexedDBHelperInstance.getDataByKey.bind(indexedDBHelperInstance),updateData:indexedDBHelperInstance.updateData.bind(indexedDBHelperInstance),deleteData:indexedDBHelperInstance.deleteData.bind(indexedDBHelperInstance),getDB:indexedDBHelperInstance.getDB.bind(indexedDBHelperInstance)};function createLegacyAPI(){let lastDBName=null;const originalMethods={initDB:window.indexedDBHelper.initDB,addData:window.indexedDBHelper.addData,getAllData:window.indexedDBHelper.getAllData,getDataByKey:window.indexedDBHelper.getDataByKey,updateData:window.indexedDBHelper.updateData,deleteData:window.indexedDBHelper.deleteData};window.indexedDBHelper.initDB=async function(dbName,version,stores){const result=await originalMethods.initDB(dbName,version,stores);lastDBName=dbName;return result};window.indexedDBHelper.addDataLegacy=async function(storeName,data){if(!lastDBName){throw new Error('数据库未初始化');}return originalMethods.addData(lastDBName,storeName,data)};window.indexedDBHelper.getAllDataLegacy=async function(storeName){if(!lastDBName){throw new Error('数据库未初始化');}return originalMethods.getAllData(lastDBName,storeName)};window.indexedDBHelper.getDataByKeyLegacy=async function(storeName,key){if(!lastDBName){throw new Error('数据库未初始化');}return originalMethods.getDataByKey(lastDBName,storeName,key)};window.indexedDBHelper.updateDataLegacy=async function(storeName,data){if(!lastDBName){throw new Error('数据库未初始化');}return originalMethods.updateData(lastDBName,storeName,data)};window.indexedDBHelper.deleteDataLegacy=async function(storeName,key){if(!lastDBName){throw new Error('数据库未初始化');}return originalMethods.deleteData(lastDBName,storeName,key)};window.indexedDBHelperLegacy={initDB:window.indexedDBHelper.initDB,addData:window.indexedDBHelper.addDataLegacy,getAllData:window.indexedDBHelper.getAllDataLegacy,getDataByKey:window.indexedDBHelper.getDataByKeyLegacy,updateData:window.indexedDBHelper.updateDataLegacy,deleteData:window.indexedDBHelper.deleteDataLegacy}}createLegacyAPI();
